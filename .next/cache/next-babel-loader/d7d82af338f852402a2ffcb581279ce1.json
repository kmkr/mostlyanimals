{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/km/git/splendid-nudibranch/pages/photos/[id].js\",\n    _s = $RefreshSig$();\n\nimport Head from \"next/head\";\nimport { useEffect } from \"react\";\nimport { forOne } from \"../../server/og-tags\";\nimport buildSrcSet from \"../../client/src/photos/src-set-builder\";\nimport PhotoWrapper from \"../../client/src/photos\";\n\nfunction PhotoPage(_ref) {\n  _s();\n\n  var keywords = _ref.keywords,\n      photo = _ref.photo;\n  var availWidth = 400;\n  useEffect(function () {\n    availWidth = screen.availWidth;\n  });\n  photo.srcSet = buildSrcSet(photo.sizes, availWidth);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"keywords\",\n        content: keywords.join(\", \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(PhotoWrapper, {\n        selectedPhoto: photo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), \"/>\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PhotoPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PhotoPage;\nexport var __N_SSG = true;\nexport default PhotoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhotoPage\");","map":{"version":3,"sources":["/home/km/git/splendid-nudibranch/pages/photos/[id].js"],"names":["Head","useEffect","forOne","buildSrcSet","PhotoWrapper","PhotoPage","keywords","photo","availWidth","screen","srcSet","sizes","join"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAOA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,SAASC,SAAT,OAAwC;AAAA;;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAAA,MAATC,KAAS,QAATA,KAAS;AACtC,MAAIC,UAAU,GAAG,GAAjB;AACAP,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,UAAU,GAAGC,MAAM,CAACD,UAApB;AACD,GAFQ,CAAT;AAIAD,EAAAA,KAAK,CAACG,MAAN,GAAeP,WAAW,CAACI,KAAK,CAACI,KAAP,EAAcH,UAAd,CAA1B;AAEA,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAEF,QAAQ,CAACM,IAAT,CAAc,IAAd;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE,QAAC,YAAD;AAAc,QAAA,aAAa,EAAEL;AAA7B;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAYD;;GApBQF,S;;KAAAA,S;;AAyDT,eAAeA,SAAf","sourcesContent":["import Head from \"next/head\";\nimport { useEffect } from \"react\";\n\nimport {\n  getPhotoData,\n  getKeywordsForPhoto,\n} from \"../../server/view-data-service\";\nimport { serverToClient } from \"../../server/photos/photo-data-conversion\";\nimport { forOne } from \"../../server/og-tags\";\nimport buildSrcSet from \"../../client/src/photos/src-set-builder\";\nimport PhotoWrapper from \"../../client/src/photos\";\n\nfunction PhotoPage({ keywords, photo }) {\n  let availWidth = 400;\n  useEffect(() => {\n    availWidth = screen.availWidth;\n  });\n\n  photo.srcSet = buildSrcSet(photo.sizes, availWidth);\n\n  return (\n    <>\n      <Head>\n        <meta name=\"keywords\" content={keywords.join(\", \")} />\n      </Head>\n\n      <div id=\"container\">\n        <PhotoWrapper selectedPhoto={photo} />\n        />\n      </div>\n    </>\n  );\n}\n\nexport async function getStaticPaths() {\n  const allPhotos = await getPhotoData();\n  return {\n    paths: allPhotos.photos.map((photo) => ({\n      params: {\n        id: photo.key,\n      },\n    })),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps(context) {\n  const photoData = await getPhotoData();\n\n  const selectedPhoto = photoData.photos.find(\n    (photo) => photo.key === context.params.id\n  );\n  if (!selectedPhoto) {\n    return {\n      notFound: true,\n    };\n  }\n\n  const photoKeywords = getKeywordsForPhoto(selectedPhoto);\n  const mappedPhoto = serverToClient(selectedPhoto, photoData.base);\n\n  return {\n    props: {\n      keywords: photoKeywords,\n      photo: mappedPhoto,\n    },\n  };\n}\n\nexport default PhotoPage;\n"]},"metadata":{},"sourceType":"module"}