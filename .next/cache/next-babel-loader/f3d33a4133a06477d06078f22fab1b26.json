{"ast":null,"code":"const {\n  MongoClient\n} = require(\"mongodb\");\n\nconst getCollection = require(\"./get\");\n\nconst insertToCollection = require(\"./insert\");\n\nconst destroyFromCollection = require(\"./destroy\");\n\nconst updateOneInCollection = require(\"./update\");\n\nconst url = process.env.SN_DB_URL;\nconst getDb = new Promise((resolve, reject) => {\n  client = new MongoClient(url, {\n    useNewUrlParser: true\n  });\n  client.connect(err => {\n    if (err) {\n      return reject(err);\n    }\n\n    return resolve(client.db(\"splendid-nudibranch\"));\n  });\n});\nmodule.exports = {\n  insert(collectionName, data) {\n    return getDb.then(db => insertToCollection(db, collectionName, data));\n  },\n\n  list(collectionName, filter) {\n    return getDb.then(db => getCollection(db, collectionName, filter));\n  },\n\n  delete(collectionName, filter) {\n    return getDb.then(db => destroyFromCollection(db, collectionName, filter));\n  },\n\n  update(collectionName, filter, newValues) {\n    return getDb.then(db => updateOneInCollection(db, collectionName, filter, newValues)).then(() => this.list(collectionName, filter)).then(data => data[0]);\n  },\n\n  updateWithInsertFallback(collectionName, filter, data) {\n    return getDb.then(db => {\n      return getCollection(db, collectionName, filter).then(collection => {\n        if (collection.length) {\n          return updateOneInCollection(db, collectionName, filter, data);\n        }\n\n        return insertToCollection(db, collectionName, data);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["/home/km/git/splendid-nudibranch/server/db/index.js"],"names":["MongoClient","require","getCollection","insertToCollection","destroyFromCollection","updateOneInCollection","url","process","env","SN_DB_URL","getDb","Promise","resolve","reject","client","useNewUrlParser","connect","err","db","module","exports","insert","collectionName","data","then","list","filter","delete","update","newValues","updateWithInsertFallback","collection","length"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,SAAD,CAA/B;;AAEA,MAAMC,aAAa,GAAGD,OAAO,CAAC,OAAD,CAA7B;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,UAAD,CAAlC;;AACA,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,WAAD,CAArC;;AACA,MAAMI,qBAAqB,GAAGJ,OAAO,CAAC,UAAD,CAArC;;AAEA,MAAMK,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAxB;AACA,MAAMC,KAAK,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7CC,EAAAA,MAAM,GAAG,IAAId,WAAJ,CAAgBM,GAAhB,EAAqB;AAAES,IAAAA,eAAe,EAAE;AAAnB,GAArB,CAAT;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAgBC,GAAD,IAAS;AACtB,QAAIA,GAAJ,EAAS;AACP,aAAOJ,MAAM,CAACI,GAAD,CAAb;AACD;;AAED,WAAOL,OAAO,CAACE,MAAM,CAACI,EAAP,CAAU,qBAAV,CAAD,CAAd;AACD,GAND;AAOD,CATa,CAAd;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,CAACC,cAAD,EAAiBC,IAAjB,EAAuB;AAC3B,WAAOb,KAAK,CAACc,IAAN,CAAYN,EAAD,IAAQf,kBAAkB,CAACe,EAAD,EAAKI,cAAL,EAAqBC,IAArB,CAArC,CAAP;AACD,GAHc;;AAIfE,EAAAA,IAAI,CAACH,cAAD,EAAiBI,MAAjB,EAAyB;AAC3B,WAAOhB,KAAK,CAACc,IAAN,CAAYN,EAAD,IAAQhB,aAAa,CAACgB,EAAD,EAAKI,cAAL,EAAqBI,MAArB,CAAhC,CAAP;AACD,GANc;;AAOfC,EAAAA,MAAM,CAACL,cAAD,EAAiBI,MAAjB,EAAyB;AAC7B,WAAOhB,KAAK,CAACc,IAAN,CAAYN,EAAD,IAChBd,qBAAqB,CAACc,EAAD,EAAKI,cAAL,EAAqBI,MAArB,CADhB,CAAP;AAGD,GAXc;;AAYfE,EAAAA,MAAM,CAACN,cAAD,EAAiBI,MAAjB,EAAyBG,SAAzB,EAAoC;AACxC,WAAOnB,KAAK,CACTc,IADI,CACEN,EAAD,IACJb,qBAAqB,CAACa,EAAD,EAAKI,cAAL,EAAqBI,MAArB,EAA6BG,SAA7B,CAFlB,EAIJL,IAJI,CAIC,MAAM,KAAKC,IAAL,CAAUH,cAAV,EAA0BI,MAA1B,CAJP,EAKJF,IALI,CAKED,IAAD,IAAUA,IAAI,CAAC,CAAD,CALf,CAAP;AAMD,GAnBc;;AAoBfO,EAAAA,wBAAwB,CAACR,cAAD,EAAiBI,MAAjB,EAAyBH,IAAzB,EAA+B;AACrD,WAAOb,KAAK,CAACc,IAAN,CAAYN,EAAD,IAAQ;AACxB,aAAOhB,aAAa,CAACgB,EAAD,EAAKI,cAAL,EAAqBI,MAArB,CAAb,CAA0CF,IAA1C,CAAgDO,UAAD,IAAgB;AACpE,YAAIA,UAAU,CAACC,MAAf,EAAuB;AACrB,iBAAO3B,qBAAqB,CAACa,EAAD,EAAKI,cAAL,EAAqBI,MAArB,EAA6BH,IAA7B,CAA5B;AACD;;AAED,eAAOpB,kBAAkB,CAACe,EAAD,EAAKI,cAAL,EAAqBC,IAArB,CAAzB;AACD,OANM,CAAP;AAOD,KARM,CAAP;AASD;;AA9Bc,CAAjB","sourcesContent":["const { MongoClient } = require(\"mongodb\");\n\nconst getCollection = require(\"./get\");\nconst insertToCollection = require(\"./insert\");\nconst destroyFromCollection = require(\"./destroy\");\nconst updateOneInCollection = require(\"./update\");\n\nconst url = process.env.SN_DB_URL;\nconst getDb = new Promise((resolve, reject) => {\n  client = new MongoClient(url, { useNewUrlParser: true });\n  client.connect((err) => {\n    if (err) {\n      return reject(err);\n    }\n\n    return resolve(client.db(\"splendid-nudibranch\"));\n  });\n});\n\nmodule.exports = {\n  insert(collectionName, data) {\n    return getDb.then((db) => insertToCollection(db, collectionName, data));\n  },\n  list(collectionName, filter) {\n    return getDb.then((db) => getCollection(db, collectionName, filter));\n  },\n  delete(collectionName, filter) {\n    return getDb.then((db) =>\n      destroyFromCollection(db, collectionName, filter)\n    );\n  },\n  update(collectionName, filter, newValues) {\n    return getDb\n      .then((db) =>\n        updateOneInCollection(db, collectionName, filter, newValues)\n      )\n      .then(() => this.list(collectionName, filter))\n      .then((data) => data[0]);\n  },\n  updateWithInsertFallback(collectionName, filter, data) {\n    return getDb.then((db) => {\n      return getCollection(db, collectionName, filter).then((collection) => {\n        if (collection.length) {\n          return updateOneInCollection(db, collectionName, filter, data);\n        }\n\n        return insertToCollection(db, collectionName, data);\n      });\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"script"}