{"ast":null,"code":"import listPhotos from \"./photos/list\";\nexport function getPhotoData() {\n  return listPhotos();\n}\nconst stopWords = [/\\d{4}/];\n\nfunction noStopWords(elem) {\n  return !stopWords.some(sw => sw.test(elem));\n}\n\nfunction onlyUnique(value, index, ary) {\n  return ary.indexOf(value) === index;\n}\n\nfunction reduceFlatten(a, b) {\n  return a.concat(b);\n}\n\nexport function getKeywordsForPhoto(photo) {\n  return [photo.title, ...(photo.location || \"\").split(\", \"), ...photo.tags].filter(noStopWords).filter(t => t);\n}\nexport function getAllKeywords() {\n  return getPhotoData().then(({\n    photos\n  }) => [\"diving\", \"scuba\", \"underwater\", \"photography\", \"fish\", \"nudibranch\", \"crab\", \"shrimp\", \"shark\", \"macro\", ...photos // Location tags are separated by commas - I want all such word groups to be candidates for unique filter so that \"The Philippines\", \"Pandan Island, The Philippines\" and \"Apo Reef, The Philippines\" ends up as three separate keywords \"Pandan Island\", \"Apo Reef\" and \"The Philippines\"\n  .map(p => (p.location || \"\").split(\", \")).reduce(reduceFlatten, []), ...photos.map(p => p.tags).reduce(reduceFlatten, []).filter(noStopWords)].filter(onlyUnique).filter(t => t));\n}","map":null,"metadata":{},"sourceType":"module"}