{"ast":null,"code":"import getWidth from \"./get-width\";\n\nfunction getNumPortrait(photos) {\n  return photos.filter(photo => photo.mode === \"portrait\").length;\n}\n\nexport default function (_photos) {\n  const photos = [..._photos];\n  const totalWidth = Math.min(getWidth(), 2560);\n  const groups = [];\n\n  while (photos.length) {\n    const subGroup = {\n      key: \"\",\n      height: null,\n      photos: []\n    };\n    let numThisRow = 3;\n    let portraitScaleFactor = 1;\n    let landscapeScaleFactor = 1;\n    const numNext5 = getNumPortrait(photos.slice(0, 5));\n\n    if (numNext5 && numNext5 < 5) {\n      const numNext4 = getNumPortrait(photos.slice(0, 4));\n      const numNext3 = getNumPortrait(photos.slice(0, 3));\n\n      if (numNext5 === 4) {\n        // ??\n        numThisRow = 5;\n      } else if (numNext5 === 3) {\n        numThisRow = 5;\n        portraitScaleFactor = 0.6;\n        landscapeScaleFactor = 1.3;\n      } else if (numNext4 === 2) {\n        numThisRow = 4;\n        portraitScaleFactor = 0.6;\n        landscapeScaleFactor = 1.35;\n      } else if (numNext3 === 1) {\n        portraitScaleFactor = 0.5;\n        landscapeScaleFactor = 1.2;\n      }\n    }\n\n    for (let i = 0; i < numThisRow; i++) {\n      const photoToAdd = photos.shift();\n\n      if (!photoToAdd) {\n        groups.push(subGroup);\n        return groups;\n      }\n\n      const scale = photoToAdd.mode === \"portrait\" ? portraitScaleFactor : landscapeScaleFactor;\n      const marginsInRow = (numThisRow + 1) * 8;\n      photoToAdd.displayedWidth = (totalWidth - marginsInRow) / numThisRow * scale;\n      subGroup.photos.push(photoToAdd);\n      subGroup.key += photoToAdd.key;\n      const ratio = photoToAdd.sizes.small.height / photoToAdd.sizes.small.width;\n      const height = photoToAdd.displayedWidth * ratio;\n      subGroup.height = subGroup.height ? Math.min(subGroup.height, height) : height; // next row\n    }\n\n    groups.push(subGroup);\n  }\n\n  return groups;\n}","map":{"version":3,"sources":["/home/km/git/splendid-nudibranch/client/src/collage/set-width-helper.js"],"names":["getWidth","getNumPortrait","photos","filter","photo","mode","length","_photos","totalWidth","Math","min","groups","subGroup","key","height","numThisRow","portraitScaleFactor","landscapeScaleFactor","numNext5","slice","numNext4","numNext3","i","photoToAdd","shift","push","scale","marginsInRow","displayedWidth","ratio","sizes","small","width"],"mappings":"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","sourcesContent":["import getWidth from \"./get-width\";\n\nfunction getNumPortrait(photos) {\n  return photos.filter((photo) => photo.mode === \"portrait\").length;\n}\n\nexport default function (_photos) {\n  const photos = [..._photos];\n  const totalWidth = Math.min(getWidth(), 2560);\n  const groups = [];\n\n  while (photos.length) {\n    const subGroup = {\n      key: \"\",\n      height: null,\n      photos: [],\n    };\n    let numThisRow = 3;\n    let portraitScaleFactor = 1;\n    let landscapeScaleFactor = 1;\n    const numNext5 = getNumPortrait(photos.slice(0, 5));\n\n    if (numNext5 && numNext5 < 5) {\n      const numNext4 = getNumPortrait(photos.slice(0, 4));\n      const numNext3 = getNumPortrait(photos.slice(0, 3));\n\n      if (numNext5 === 4) {\n        // ??\n        numThisRow = 5;\n      } else if (numNext5 === 3) {\n        numThisRow = 5;\n        portraitScaleFactor = 0.6;\n        landscapeScaleFactor = 1.3;\n      } else if (numNext4 === 2) {\n        numThisRow = 4;\n        portraitScaleFactor = 0.6;\n        landscapeScaleFactor = 1.35;\n      } else if (numNext3 === 1) {\n        portraitScaleFactor = 0.5;\n        landscapeScaleFactor = 1.2;\n      }\n    }\n\n    for (let i = 0; i < numThisRow; i++) {\n      const photoToAdd = photos.shift();\n      if (!photoToAdd) {\n        groups.push(subGroup);\n        return groups;\n      }\n      const scale =\n        photoToAdd.mode === \"portrait\"\n          ? portraitScaleFactor\n          : landscapeScaleFactor;\n\n      const marginsInRow = (numThisRow + 1) * 8;\n      photoToAdd.displayedWidth =\n        ((totalWidth - marginsInRow) / numThisRow) * scale;\n      subGroup.photos.push(photoToAdd);\n      subGroup.key += photoToAdd.key;\n      const ratio =\n        photoToAdd.sizes.small.height / photoToAdd.sizes.small.width;\n      const height = photoToAdd.displayedWidth * ratio;\n      subGroup.height = subGroup.height\n        ? Math.min(subGroup.height, height)\n        : height;\n      // next row\n    }\n    groups.push(subGroup);\n  }\n\n  return groups;\n}\n"]},"metadata":{},"sourceType":"module"}