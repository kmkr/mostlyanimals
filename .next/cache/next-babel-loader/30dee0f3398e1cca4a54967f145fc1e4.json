{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport Head from \"next/head\";\nimport { useEffect } from \"react\";\nimport { getPhotoData, getKeywordsForPhoto } from \"../../server/view-data-service\";\nimport { serverToClient } from \"../../server/photos/photo-data-conversion\";\nimport { forOne } from \"../../server/og-tags\";\nimport buildSrcSet from \"../../client/photos/src-set-builder\";\nimport PhotoWrapper from \"../../client/photos\";\nimport { photoTitle } from \"../../src/title-service\";\n\nfunction PhotoPage({\n  keywords,\n  photo\n}) {\n  let availWidth = 400;\n  useEffect(() => {\n    availWidth = screen.availWidth;\n  });\n  photo.srcSet = buildSrcSet(photo.sizes, availWidth);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: photoTitle(photo)\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"keywords\",\n        content: keywords.join(\", \")\n      }), Object.entries(forOne(photo)).map(([key, value]) => /*#__PURE__*/_jsx(\"meta\", {\n        property: key,\n        content: value\n      }, key))]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsx(PhotoWrapper, {\n        selectedPhoto: photo\n      }), \"/>\"]\n    })]\n  });\n}\n\nexport async function getStaticPaths() {\n  const allPhotos = await getPhotoData();\n  return {\n    paths: allPhotos.photos.map(photo => ({\n      params: {\n        id: photo.key\n      }\n    })),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const photoData = await getPhotoData();\n  const selectedPhoto = photoData.photos.find(photo => photo.key === context.params.id);\n\n  if (!selectedPhoto) {\n    return {\n      notFound: true\n    };\n  }\n\n  const photoKeywords = getKeywordsForPhoto(selectedPhoto);\n  const mappedPhoto = serverToClient(selectedPhoto, photoData.base);\n  return {\n    props: {\n      keywords: photoKeywords,\n      photo: mappedPhoto\n    }\n  };\n}\nexport default PhotoPage;","map":null,"metadata":{},"sourceType":"module"}