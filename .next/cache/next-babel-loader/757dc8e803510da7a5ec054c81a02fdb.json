{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nmodule.exports = (db, collectionName, filter, newValues) => {\n  return new Promise((resolve, reject) => {\n    db.collection(collectionName).updateOne(filter, {\n      $set: _objectSpread(_objectSpread({}, newValues), {}, {\n        updated_at: new Date()\n      })\n    }, (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(data);\n    });\n  });\n};","map":{"version":3,"sources":["/home/km/git/splendid-nudibranch/server/db/update/index.js"],"names":["module","exports","db","collectionName","filter","newValues","Promise","resolve","reject","collection","updateOne","$set","updated_at","Date","err","data"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAiB,CAACC,EAAD,EAAKC,cAAL,EAAqBC,MAArB,EAA6BC,SAA7B,KAA2C;AAC1D,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,EAAE,CAACO,UAAH,CAAcN,cAAd,EAA8BO,SAA9B,CACEN,MADF,EAEE;AAAEO,MAAAA,IAAI,kCAAON,SAAP;AAAkBO,QAAAA,UAAU,EAAE,IAAIC,IAAJ;AAA9B;AAAN,KAFF,EAGE,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,UAAID,GAAJ,EAAS;AACP,eAAON,MAAM,CAACM,GAAD,CAAb;AACD;;AAED,aAAOP,OAAO,CAACQ,IAAD,CAAd;AACD,KATH;AAWD,GAZM,CAAP;AAaD,CAdD","sourcesContent":["module.exports = (db, collectionName, filter, newValues) => {\n  return new Promise((resolve, reject) => {\n    db.collection(collectionName).updateOne(\n      filter,\n      { $set: { ...newValues, updated_at: new Date() } },\n      (err, data) => {\n        if (err) {\n          return reject(err);\n        }\n\n        return resolve(data);\n      }\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"script"}